{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description": "Cloudwatch for Cloudtrail logs",

  "Parameters" : {
    "AlarmEmail" : {
      "Description" : "Email for Cloudwatch alerts",
      "Type" : "String"
    },

    "LogsSupported" : {
      "Description" : "True or false for the support of Logs in a region.",
      "Type" : "String"
    },

    "CloudTrailSupported" : {
      "Description" : "True or false for the support of CloudTrail in a region.",
      "Type" : "String"
    },

    "IamLogsRole" : {
      "Description" : "The IAM Logs Role Required.",
      "Type" : "String"
    }

  },
  
  "Conditions" : {

    "EnabledLogs" : {
      "Fn::Equals" : [ "True", { "Ref" : "LogsSupported" } ]
    },

    "EnabledCloudTrail" : {
      "Fn::Equals" : [ "True", { "Ref" : "CloudTrailSupported" } ]
    }


  },

  "Resources" : {
    
    "CloudTrailLogGroup" : {
      "Condition" : "EnabledLogs",
      "Type" : "AWS::Logs::LogGroup",
      "Properties" : {
        "RetentionInDays" : "1"
      }
    },

    "alertSNStopic": {
      "Condition" : "EnabledCloudTrail",
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "DisplayName": "CloudtrailAlerts",
        "Subscription": [
          { "Endpoint": { "Ref": "AlarmEmail" },
            "Protocol": "email"
          }
        ],
        "TopicName": "CloudtrailAlerts"
      }
    },

    "alertSNSpolicy" : {
      "Condition" : "EnabledCloudTrail",
      "Type" : "AWS::SNS::TopicPolicy",
      "Properties" : {
        "PolicyDocument" :  {
          "Id" : "__default_policy_ID",
          "Version" : "2012-10-17",
          "Statement" : [ 
            {
              "Sid": "__default_statement_ID",
              "Effect": "Allow",
              "Principal": {
                "AWS": "*"
              },
              "Action": [
                "SNS:ListSubscriptionsByTopic",
                "SNS:Subscribe",
                "SNS:DeleteTopic",
                "SNS:GetTopicAttributes",
                "SNS:Publish",
                "SNS:RemovePermission",
                "SNS:AddPermission",
                "SNS:Receive",
                "SNS:SetTopicAttributes"
              ],
              "Resource": { "Fn::Join" : [ "", [ "arn:aws:sns:", { "Ref" : "AWS::Region" } ,":", { "Ref" : "AWS::AccountId"}, ":CloudtrailAlerts" ]]}
            }
          ]
        },
        "Topics" : [ { "Ref" : "alertSNStopic" } ]
      }
    },

    "RegionCloudTrail" : {
      "Condition" : "EnabledCloudTrail",
      "Type" : "AWS::CloudTrail::Trail",
      "Properties" : {
        "IsLogging" : "True",
        "S3BucketName" : "mmc-innovation-centre-logs",
        "S3KeyPrefix" : "CloudTrail",
        "SnsTopicName" : { "Fn::GetAtt" : [ "alertSNStopic", "TopicName"] }
      }
    },

    "SecurityGroupChangesMetricFilter": {
      "Condition" : "EnabledLogs",
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "LogGroupName": { "Ref" : "CloudTrailLogGroup" },
        "FilterPattern": "{ ($.eventName = AuthorizeSecurityGroupIngress) || ($.eventName = AuthorizeSecurityGroupEgress) || ($.eventName = RevokeSecurityGroupIngress) || ($.eventName = RevokeSecurityGroupEgress) || ($.eventName = CreateSecurityGroup) || ($.eventName = DeleteSecurityGroup) }",
        "MetricTransformations": [
          {
            "MetricNamespace": "CloudTrailMetrics",
            "MetricName": "SecurityGroupEventCount",
            "MetricValue": "1"
          }
        ]
      }
    },
      
    "SecurityGroupChangesAlarm": {
      "Condition" : "EnabledLogs",
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName" : "CloudTrailSecurityGroupChanges",
        "AlarmDescription" : "Alarms when an API call is made to create, update or delete a Security Group.",
        "AlarmActions" : [{ "Ref" : "alertSNStopic" }],
        "MetricName" : "SecurityGroupEventCount",
        "Namespace" : "CloudTrailMetrics",
        "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods" : "1",
        "Period" : "300",
        "Statistic" : "Sum",
        "Threshold" : "1"
      }
    },

    "NetworkAclChangesMetricFilter": {
      "Condition" : "EnabledLogs",
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "LogGroupName": { "Ref" : "CloudTrailLogGroup" },
        "FilterPattern": "{ ($.eventName = CreateNetworkAcl) || ($.eventName = CreateNetworkAclEntry) || ($.eventName = DeleteNetworkAcl) || ($.eventName = DeleteNetworkAclEntry) || ($.eventName = ReplaceNetworkAclEntry) || ($.eventName = ReplaceNetworkAclAssociation) }",
        "MetricTransformations": [
          {
            "MetricNamespace": "CloudTrailMetrics",
            "MetricName": "NetworkAclEventCount",
            "MetricValue": "1"
          }
        ]
      }
    },
    
    "NetworkAclChangesAlarm": {
      "Condition" : "EnabledLogs",
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName" : "CloudTrailNetworkAclChanges",
        "AlarmDescription" : "Alarms when an API call is made to create, update or delete a Network ACL.",
        "AlarmActions" : [{ "Ref" : "alertSNStopic" }],
        "MetricName" : "NetworkAclEventCount",
        "Namespace" : "CloudTrailMetrics",
        "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods" : "1",
        "Period" : "300",
        "Statistic" : "Sum",
        "Threshold" : "1"
      }
    },

    "GatewayChangesMetricFilter": {
      "Condition" : "EnabledLogs",
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "LogGroupName": { "Ref" : "CloudTrailLogGroup" },
        "FilterPattern": "{ ($.eventName = CreateCustomerGateway) || ($.eventName = DeleteCustomerGateway) || ($.eventName = AttachInternetGateway) || ($.eventName = CreateInternetGateway) || ($.eventName = DeleteInternetGateway) || ($.eventName = DetachInternetGateway) }",
        "MetricTransformations": [
          {
            "MetricNamespace": "CloudTrailMetrics",
            "MetricName": "GatewayEventCount",
            "MetricValue": "1"
          }
        ]
      }
    },

    "GatewayChangesAlarm": {
      "Condition" : "EnabledLogs",
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName" : "CloudTrailGatewayChanges",
        "AlarmDescription" : "Alarms when an API call is made to create, update or delete a Customer or Internet Gateway.",
        "AlarmActions" : [{ "Ref" : "alertSNStopic" }],
        "MetricName" : "GatewayEventCount",
        "Namespace" : "CloudTrailMetrics",
        "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods" : "1",
        "Period" : "300",
        "Statistic" : "Sum",
        "Threshold" : "1"
      }
    },

    "VpcChangesMetricFilter": {
      "Condition" : "EnabledLogs",
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "LogGroupName": { "Ref" : "CloudTrailLogGroup" },
        "FilterPattern": "{ ($.eventName = CreateVpc) || ($.eventName = DeleteVpc) || ($.eventName = ModifyVpcAttribute) || ($.eventName = AcceptVpcPeeringConnection) || ($.eventName = CreateVpcPeeringConnection) || ($.eventName = DeleteVpcPeeringConnection) || ($.eventName = RejectVpcPeeringConnection) || ($.eventName = AttachClassicLinkVpc) || ($.eventName = DetachClassicLinkVpc) || ($.eventName = DisableVpcClassicLink) || ($.eventName = EnableVpcClassicLink) }",
        "MetricTransformations": [
          {
            "MetricNamespace": "CloudTrailMetrics",
            "MetricName": "VpcEventCount",
            "MetricValue": "1"
          }
        ]
      }
    },

    "VpcChangesAlarm": {
      "Condition" : "EnabledLogs",
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName" : "CloudTrailVpcChanges",
        "AlarmDescription" : "Alarms when an API call is made to create, update or delete a VPC, VPC peering connection or VPC connection to classic.",
        "AlarmActions" : [{ "Ref" : "alertSNStopic" }],
        "MetricName" : "VpcEventCount",
        "Namespace" : "CloudTrailMetrics",
        "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods" : "1",
        "Period" : "300",
        "Statistic" : "Sum",
        "Threshold" : "1"
      }
    },

    "EC2InstanceChangesMetricFilter": {
      "Condition" : "EnabledLogs",
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "LogGroupName": { "Ref" : "CloudTrailLogGroup" },
        "FilterPattern": "{ ($.eventName = RunInstances) || ($.eventName = RebootInstances) || ($.eventName = StartInstances) || ($.eventName = StopInstances) || ($.eventName = TerminateInstances) }",
        "MetricTransformations": [
          {
            "MetricNamespace": "CloudTrailMetrics",
            "MetricName": "EC2InstanceEventCount",
            "MetricValue": "1"
          }
        ]
      }
    },

    "EC2InstanceChangesAlarm": {
      "Condition" : "EnabledLogs",
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName" : "CloudTrailEC2InstanceChanges",
        "AlarmDescription" : "Alarms when an API call is made to create, terminate, start, stop or reboot an EC2 instance.",
        "AlarmActions" : [{ "Ref" : "alertSNStopic" }],
        "MetricName" : "EC2InstanceEventCount",
        "Namespace" : "CloudTrailMetrics",
        "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods" : "1",
        "Period" : "300",
        "Statistic" : "Sum",
        "Threshold" : "1"
      }
    },

    "EC2LargeInstanceChangesMetricFilter": {
      "Condition" : "EnabledLogs",
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "LogGroupName": { "Ref" : "CloudTrailLogGroup" },
        "FilterPattern": "{ (($.eventName = RunInstances) || ($.eventName = RebootInstances) || ($.eventName = StartInstances) || ($.eventName = StopInstances) || ($.eventName = TerminateInstances)) && (($.requestParameters.instanceType = *.8xlarge) || ($.requestParameters.instanceType = *.4xlarge)) }",
        "MetricTransformations": [
          {
            "MetricNamespace": "CloudTrailMetrics",
            "MetricName": "EC2LargeInstanceEventCount",
            "MetricValue": "1"
          }
        ]
      }
    },

    "EC2LargeInstanceChangesAlarm": {
      "Condition" : "EnabledLogs",
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName" : "CloudTrailEC2LargeInstanceChanges",
        "AlarmDescription" : "Alarms when an API call is made to create, terminate, start, stop or reboot a 4x or 8x-large EC2 instance.",
        "AlarmActions" : [{ "Ref" : "alertSNStopic" }],
        "MetricName" : "EC2LargeInstanceEventCount",
        "Namespace" : "CloudTrailMetrics",
        "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods" : "1",
        "Period" : "300",
        "Statistic" : "Sum",
        "Threshold" : "1"
      }
    },

    "CloudTrailChangesMetricFilter": {
      "Condition" : "EnabledLogs",
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "LogGroupName": { "Ref" : "CloudTrailLogGroup" },
        "FilterPattern": "{ ($.eventName = CreateTrail) || ($.eventName = UpdateTrail) || ($.eventName = DeleteTrail) || ($.eventName = StartLogging) || ($.eventName = StopLogging) }",
        "MetricTransformations": [
          {
            "MetricNamespace": "CloudTrailMetrics",
            "MetricName": "CloudTrailEventCount",
            "MetricValue": "1"
          }
        ]
      }
    },

    "CloudTrailChangesAlarm": {
      "Condition" : "EnabledLogs",
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName" : "CloudTrailChanges",
        "AlarmDescription" : "Alarms when an API call is made to create, update or delete a CloudTrail trail, or to start or stop logging to a trail.",
        "AlarmActions" : [{ "Ref" : "alertSNStopic" }],
        "MetricName" : "CloudTrailEventCount",
        "Namespace" : "CloudTrailMetrics",
        "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods" : "1",
        "Period" : "300",
        "Statistic" : "Sum",
        "Threshold" : "1"
      }
    },

    "ConsoleSignInFailuresMetricFilter": {
      "Condition" : "EnabledLogs",
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "LogGroupName": { "Ref" : "CloudTrailLogGroup" },
        "FilterPattern": "{ ($.eventName = ConsoleLogin) && ($.errorMessage = \"Failed authentication\") }",
        "MetricTransformations": [
          {
            "MetricNamespace": "CloudTrailMetrics",
            "MetricName": "ConsoleSignInFailureCount",
            "MetricValue": "1"
          }
        ]
      }
    },

    "ConsoleSignInFailuresAlarm": {
      "Condition" : "EnabledLogs",
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName" : "CloudTrailConsoleSignInFailures",
        "AlarmDescription" : "Alarms when an unauthenticated API call is made to sign into the console.",
        "AlarmActions" : [{ "Ref" : "alertSNStopic" }],
        "MetricName" : "ConsoleSignInFailureCount",
        "Namespace" : "CloudTrailMetrics",
        "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods" : "1",
        "Period" : "300",
        "Statistic" : "Sum",
        "Threshold" : "3"
      }
    },

    "AuthorizationFailuresMetricFilter": {
      "Condition" : "EnabledLogs",
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "LogGroupName": { "Ref" : "CloudTrailLogGroup" },
        "FilterPattern": "{ ($.errorCode = \"*UnauthorizedOperation\") || ($.errorCode = \"AccessDenied*\") }",
        "MetricTransformations": [
          {
            "MetricNamespace": "CloudTrailMetrics",
            "MetricName": "AuthorizationFailureCount",
            "MetricValue": "1"
          }
        ]
      }
    },

    "AuthorizationFailuresAlarm": {
      "Condition" : "EnabledLogs",
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName" : "CloudTrailAuthorizationFailures",
        "AlarmDescription" : "Alarms when an unauthorized API call is made.",
        "AlarmActions" : [{ "Ref" : "alertSNStopic" }],
        "MetricName" : "AuthorizationFailureCount",
        "Namespace" : "CloudTrailMetrics",
        "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods" : "1",
        "Period" : "300",
        "Statistic" : "Sum",
        "Threshold" : "1"
      }
    },

    "IAMPolicyChangesMetricFilter": {
      "Condition" : "EnabledLogs",
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "LogGroupName": { "Ref" : "CloudTrailLogGroup" },
        "FilterPattern": "{($.eventName=DeleteGroupPolicy)||($.eventName=DeleteRolePolicy)||($.eventName=DeleteUserPolicy)||($.eventName=PutGroupPolicy)||($.eventName=PutRolePolicy)||($.eventName=PutUserPolicy)||($.eventName=CreatePolicy)||($.eventName=DeletePolicy)||($.eventName=CreatePolicyVersion)||($.eventName=DeletePolicyVersion)||($.eventName=AttachRolePolicy)||($.eventName=DetachRolePolicy)||($.eventName=AttachUserPolicy)||($.eventName=DetachUserPolicy)||($.eventName=AttachGroupPolicy)||($.eventName=DetachGroupPolicy)}",
        "MetricTransformations": [
          {
            "MetricNamespace": "CloudTrailMetrics",
            "MetricName": "IAMPolicyEventCount",
            "MetricValue": "1"
          }
        ]
      }
    },

    "IAMPolicyChangesAlarm": {
      "Condition" : "EnabledLogs",
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName" : "CloudTrailIAMPolicyChanges",
        "AlarmDescription" : "Alarms when an API call is made to change an IAM policy.",
        "AlarmActions" : [{ "Ref" : "alertSNStopic" }],
        "MetricName" : "IAMPolicyEventCount",
        "Namespace" : "CloudTrailMetrics",
        "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods" : "1",
        "Period" : "300",
        "Statistic" : "Sum",
        "Threshold" : "1"
      }
    }

  },

  "Outputs" : {

    "LogGroup" : {
      "Condition" : "EnabledLogs",
      "Description" : "Configure Cloudtrail send logs to this group",
      "Value" : { "Fn::Join" : [ ":", [ "arn:aws:logs", { "Ref" : "AWS::Region" }, { "Ref" : "AWS::AccountId" }, "log-group", { "Ref" : "CloudTrailLogGroup" }, "*" ] ] }
    }

  }

}
